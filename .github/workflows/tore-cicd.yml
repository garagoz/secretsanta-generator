name: My CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  compile_job:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Compile with Maven
      run: mvn compile --file pom.xml
      
  security_check_job:
    runs-on: self-hosted
    needs: compile_job

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Trivy installation
      run: |
        sudo apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install trivy -y
    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .

    - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json
      
  test_job:
    runs-on: self-hosted
    needs: security_check_job

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Maven Test
      run: mvn test
      
  build_and_sonar_scan_job:
    runs-on: self-hosted
    needs: test_job

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Maven Build
      run: mvn package
      
    - name: Upload jar artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar  

    - name: Install unzip
      run: sudo apt install unzip -y
      
    - name: Sonarqube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
      # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
      
  docker_build_and_push_job:
    runs-on: self-hosted
    needs: build_and_sonar_scan_job

    steps:
    - name: Download jar artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app # this will download jar artifact to ./app folder
        
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Build Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker Image
      run: |
        docker build -t atorayew/secretsanta:latest .

    - name: Trivy Image Scan
      run: |
        echo "Hello Arslanmyrat"
        trivy image --format table -o trivy-image-report.html atorayew/secretsanta:latest

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker Image
      run: |
        docker push atorayew/secretsanta:latest
        
  doploy_to_kubernetes_job:
    runs-on: self-hosted
    needs: docker_build_and_push_job

    steps:        
    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with:
        base64-kube-config: ${{ secrets.KUBE_CONFIG }}

    - run: |
        kubectl apply -f deployment-service.yaml
        kubectl get svc
      
